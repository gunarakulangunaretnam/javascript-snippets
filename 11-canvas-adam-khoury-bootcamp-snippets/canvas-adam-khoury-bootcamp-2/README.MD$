## 20. Particle Effect System Tutorial Snow-falling-animation-snippets

### Example 0

#### HTML

```HTML
<!DOCTYPE html>

<html>

    <head>

        <title>This is the title</title>

        <link rel="stylesheet" type="text/css" href="style.css">
        <meta charset="utf-8">

    </head>

<body>

 <canvas id="can1" width="800" height="600"></canvas>

    <h2 id="status"></h2>

    <script src="js.js" type="text/javascript"></script>

</body>

</html>
```

#### CSS

```CSS
#can1 {

    background: white;
      border:1px solid black;
}
body {

    background-color:#666;
   margin: 40px;
}
```

#### JavaScript

```JavaScript
window.addEventListener("load", function () {

    initCanvas();

});

var img = new Image();
img.src = "im.jpg";

function initCanvas() {

    var ctx = document.getElementById('can1').getContext("2d");
    var cW = ctx.canvas.width, cH = ctx.canvas.height;
    var flakes = [];

    function addFlake() {

        var x = Math.floor(Math.random() * cW) + 1;
        var y = 0;
        var s = Math.floor(Math.random() * 3) + 1;//It has three layers in depth.
        flakes.push({ "x": x, "y": y, "s": s });

    }

    function snow() {
        addFlake();

        for (var i = 0; i < flakes.length; i++) {

            ctx.fillStyle = "rgba(255,255,255,.75)";//.75 is the alpha.
            ctx.beginPath();
            ctx.arc(flakes[i].x, flakes[i].y += flakes[i].s * .5, flakes[i].s * .5, 0, Math.PI * 2, false);
            ctx.fill();//fill it with the above color.

            if (flakes[i].y > cH) {//if the snow hits the bottom just remove it.

                flakes.splice(i, 1);
            }

            document.getElementById("status").innerHTML = flakes.length;
        }
    }
    function animate() {

        //ctx.save();//We use save() and restore() methods when we use rotate() or any other transform methods.

        ctx.clearRect(0, 0, cW, cH);//This is important to make the right animation.
        ctx.drawImage(img, 0, 0);
        snow()

        //ctx.restore();//We use save() and restore() methods when we use rotate() or any other transform methods.
    }

    var animateInterval = setInterval(animate, 30);

}
//Do you want to thick the snow just call the addFlake() function in the snow() function a lot of times.
//Do you want to show form differnt diraction use the rotate() method.
```

### Output

![Banner Image](github-content/example-19-0-output.gif/)

### Example 1

#### HTML

```HTML
<!DOCTYPE html>

<html>

    <head>

        <title>This is the title</title>

        <link rel="stylesheet" type="text/css" href="style.css">
        <meta charset="utf-8">

    </head>

<body>

 <canvas id="can1" width="800" height="600"></canvas>

    <h2 id="status"></h2>

    <script src="js.js" type="text/javascript"></script>

</body>

</html>
```

#### CSS

```CSS
#can1 {

    background: white;
      border:1px solid black;
}
body {

    background-color:#666;
   margin: 40px;

}
```

#### JavaScript

```JavaScript
window.addEventListener("load", function () {

    initCanvas();

});

var img = new Image();
img.src = "im.jpg";

function initCanvas() {

    var ctx = document.getElementById('can1').getContext("2d");
    var cW = ctx.canvas.width, cH = ctx.canvas.height;
    var flakes = [];

    function addFlake() {

        var x = Math.floor(Math.random() * cW) + 1;
        var y = 0;
        var s = Math.floor(Math.random() * 3) + 1;//It has three layers in depth.
        flakes.push({ "x": x, "y": y, "s": s });

    }

    function snow() {

        addFlake();
        addFlake();
        addFlake();
        addFlake();
        addFlake();
        addFlake();
        addFlake();
        addFlake();
        addFlake();
        addFlake();
        addFlake();
        addFlake();
        addFlake();

        for (var i = 0; i < flakes.length; i++) {

            ctx.fillStyle = "rgba(255,255,255,.75)";//.75 is the alpha.
            ctx.beginPath();
            ctx.arc(flakes[i].x, flakes[i].y += flakes[i].s * .5, flakes[i].s * .5, 0, Math.PI * 2, false);
            ctx.fill();//fill it with the above color.

            if (flakes[i].y > cH) {//if the snow hits the bottom just remove it.

                flakes.splice(i, 1);
            }

            document.getElementById("status").innerHTML = flakes.length;
        }
    }

    function animate() {

        //ctx.save();//We use save() and restore() methods when we use rotate() or any other transform methods.

        ctx.clearRect(0, 0, cW, cH);//This is important to make the right animation.
        ctx.drawImage(img, 0, 0);
        snow()

        //ctx.restore();//We use save() and restore() methods when we use rotate() or any other transform methods.
    }
    var animateInterval = setInterval(animate, 30);

}
//Do you want to thick the snow just call the addFlake() function in the snow() function a lot of times.
//Do you want to show form differnt diraction use the rotate() method.
```

### Output

![Banner Image](github-content/example-19-1-output.gif/)

### Example 2

#### HTML

```HTML
<!DOCTYPE html>

<html>

    <head>

        <title>This is the title</title>

        <link rel="stylesheet" type="text/css" href="style.css">
        <meta charset="utf-8">

    </head>

<body>

 <canvas id="can1" width="800" height="600"></canvas>

    <h2 id="status"></h2>

    <script src="js.js" type="text/javascript"></script>

</body>

</html>
```

#### CSS

```CSS
#can1 {

    background: white;
      border:1px solid black;
}
body {

    background-color:#666;
   margin: 40px;
}
```

#### JavaScript

```JavaScript
window.addEventListener("load", function () {

    initCanvas();

});

var img = new Image();
img.src = "im.jpg";

function initCanvas() {

    var ctx = document.getElementById('can1').getContext("2d");
    var cW = ctx.canvas.width, cH = ctx.canvas.height;
    var flakes = [];

    function addFlake() {

        var x = Math.floor(Math.random() * cW) + 1;
        var y = 0;
        var s = Math.floor(Math.random() * 3) + 1;//It has three layers in depth.
        flakes.push({ "x": x, "y": y, "s": s });

    }

    function snow() {

        addFlake();
        addFlake();


        for (var i = 0; i < flakes.length; i++) {

            ctx.fillStyle = "rgba(255,255,255,.75)";//.75 is the alpha.
            ctx.beginPath();
            ctx.arc(flakes[i].x, flakes[i].y += flakes[i].s * .5, flakes[i].s * .5, 0, Math.PI * 2, false);
            ctx.fill();//fill it with the above color.

            if (flakes[i].y > cH) {//if the snow hits the bottom just remove it.

                flakes.splice(i, 1);
            }

            document.getElementById("status").innerHTML = flakes.length;
        }
    }

    function animate() {

        ctx.save();//We use save() and restore() methods when we use rotate() or any other transform methods.

        ctx.clearRect(0, 0, cW, cH);//This is important to make the right animation.
        ctx.drawImage(img, 0, 0);
        ctx.rotate(-.4);
        snow()

        ctx.restore();//We use save() and restore() methods when we use rotate() or any other transform methods.
    }

    var animateInterval = setInterval(animate, 30);

}
//Do you want to thick the snow just call the addFlake() function in the snow() function a lot of times.
//Do you want to show form differnt diraction use the rotate() method.
```

### Output

![Banner Image](github-content/example-19-2-output.gif/)

## 21. Circular Progress Loader Canvas Snippets

### Example 0

#### HTML

```HTML
<!DOCTYPE html>

<html>

    <head>

        <title>This is the title</title>

        <link rel="stylesheet" type="text/css" href="style.css">
        <meta charset="utf-8">

    </head>

<body>

 <canvas id="can1" width="800" height="600"></canvas>

    <script src="js.js" type="text/javascript"></script>

</body>

</html>
```

#### CSS

```CSS
#can1 {

    background: white;
      border:1px solid black;
}
body {

    background-color:#666;
   margin: 40px;
}
```

#### JavaScript

```JavaScript

    var ctx = document.getElementById("can1").getContext("2d");
    var al = 0;
    var start = 4.72;
    var cw = ctx.canvas.width;
    var ch = ctx.canvas.height;
    var diff;

    function progressSim() {

        diff=((al / 100) * Math.PI * 2 * 10).toFixed(2);
        ctx.clearRect(0, 0, cw, ch);
        ctx.lineWidth = 10;
        ctx.fillStyle = "#09F";
        ctx.strokeStyle = "#09F";
        ctx.textAlign = "center";
        ctx.fillText(al + "%",38,38);
        ctx.beginPath();
        ctx.arc(35,35,30, start, diff / 10 + start, false)
        ctx.stroke();
        if (al >= 100) {

            clearInterval(Sim);

        }
        al++;
    }

    var Sim = setInterval(progressSim, 50);
```

### Output

![Banner Image](github-content/example-20-0-output.gif/)
